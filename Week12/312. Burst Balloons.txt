class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        // 在兩邊補 1，方便處理 goes out of bounds
        vector<int> a(n + 2, 1);
        for (int i = 0; i < n; ++i) a[i + 1] = nums[i];
        // dp[i][j] 表示在 (i, j) 之間 不含 i, j）所能獲得的最大金幣
        vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));

        // 列舉區間長度(從小到大)
        for (int len = 2; len <= n + 1; ++len) {
            // 左邊界 i，右邊界 j = i + len
            for (int i = 0; i + len <= n + 1; ++i) {
                int j = i + len;
                // test最後一個被戳破的氣球k，k 在 (i, j) 範圍內
                for (int k = i + 1; k < j; ++k) {
                    // 在子區間 (i,k) 和 (k,j) 已经最優的基礎上，
                    // 最後戳破 k 時能獲得的金幣是 a[i]*a[k]*a[j]
                    int coins = dp[i][k] + dp[k][j] + a[i] * a[k] * a[j];
                    dp[i][j] = max(dp[i][j], coins);
                }
            }
        }
        // 目標區間(0, n+1)
        return dp[0][n + 1];
    }
};