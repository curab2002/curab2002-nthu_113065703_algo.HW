class Solution {
public:
    struct compare {
        bool operator()(ListNode* a, ListNode* b) {
            return a->val > b->val;
        }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
         // 建一個min heap
        priority_queue<ListNode*, vector<ListNode*>, compare> pq;
        
        // 把每個list的head node 放進heap
        for (auto head : lists) {
            if (head) pq.push(head);
        }

        // 建一個dummy node，方便最後回傳
        ListNode dummy(0);
        ListNode* tail = &dummy;
        
        // 不斷取最小節點
        while (!pq.empty()) {
            ListNode* node = pq.top();
            pq.pop();
            tail->next = node;
            tail = tail->next;
            
            // 如果該節點有下一個，放進heap
            if (node->next) pq.push(node->next);
        }
        
        return dummy.next;
    }
};