class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> path;            // 暫存一條排列
        vector<bool> used(nums.size(), false);

        backtrack(nums, used, path, result);
        return result;
    }
    void backtrack(const vector<int>& nums, vector<bool>& used,
                   vector<int>& path, vector<vector<int>>& result) {
        // 若 path 包含了所有元素則得到一個完整排列
        if (path.size() == nums.size()) {
            result.push_back(path);
            return;
        }
        
        // 嘗試把每個沒用過的數加入排列
        for (int i = 0; i < (int)nums.size(); i++) {
            if (!used[i]) {
                path.push_back(nums[i]);
                used[i] = true;

                // 繼續往下層遞迴
                backtrack(nums, used, path, result);

                // 回溯，恢復狀態
                used[i] = false;
                path.pop_back();
            }
        }
    }
};