class Solution {
public:
    bool isMatch(string s, string p) {
        int n = s.size(), m = p.size();
        vector<bool> prev(m + 1, false), cur(m + 1, false);

        // dp[0][0] = true
        prev[0] = true;
        // 初始化 dp[i][0]——pattern 前綴全為 *
        for (int i = 1; i <= m; ++i)
            prev[i] = prev[i - 1] && p[i - 1] == '*';

        for (int i = 1; i <= n; ++i) {
            cur[0] = false;                // 空 pattern 不能匹配非空 s 前綴
            for (int j = 1; j <= m; ++j) {
                if (p[j - 1] == '*')
                    cur[j] = cur[j - 1]          // * 吃一個 s 字元
                        || prev[j];           // * 當空字串
                else
                    cur[j] = (p[j - 1] == s[i - 1] || p[j - 1] == '?')
                            && prev[j - 1];
            }
            swap(prev, cur);               // 進下一列
            fill(cur.begin(), cur.end(), false);
        }
        return prev[m];
    }
};