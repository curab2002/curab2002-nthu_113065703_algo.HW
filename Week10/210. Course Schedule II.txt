class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> graph(numCourses);
        vector<int> inDegree(numCourses, 0);

        // 建graph與in-degree統計
        for (auto& pre : prerequisites) {
            int course = pre[0], prev = pre[1];
            graph[prev].push_back(course);
            inDegree[course]++;
        }

        queue<int> q;
        // 將in-degree為0的節點放入queue
        for (int i = 0; i < numCourses; ++i) {
            if (inDegree[i] == 0) q.push(i);
        }

        vector<int> order;
        while (!q.empty()) {
            int curr = q.front(); q.pop();
            order.push_back(curr);
            for (int neighbor : graph[curr]) {
                if (--inDegree[neighbor] == 0) {
                    q.push(neighbor);
                }
            }
        }

        if (order.size() == numCourses)
            return order;  // 成功完成所有course
        else
            return {};     // 存在環，無法完成
    }
};