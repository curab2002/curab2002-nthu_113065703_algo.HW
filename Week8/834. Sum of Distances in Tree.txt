class Solution {
public:
    vector<vector<int>> tree;
    vector<int> count; // count[i] = 節點 i 為根的子樹節點數（含自己）
    vector<int> res;   // res[i] = 節點 i 作為根的距離總和
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        tree.resize(n);
        count.assign(n, 1); // 每個節點起碼有自己
        res.assign(n, 0);

        // 建圖
        for (auto& edge : edges) {
            tree[edge[0]].push_back(edge[1]);
            tree[edge[1]].push_back(edge[0]);
        }

        dfs1(0, -1);      // 第一次 DFS：計算子樹大小和 res[0]
        dfs2(0, -1, n);   // 第二次 DFS：推導其他節點的 res[i]

        return res;
    }
    // 第一次 DFS：從下往上累加
    void dfs1(int node, int parent) {
        for (int child : tree[node]) {
            if (child == parent) continue;

            dfs1(child, node);
            count[node] += count[child];
            res[node] += res[child] + count[child];
        }
    }

    // 第二次 DFS：從上往下推 res 值
    void dfs2(int node, int parent, int n) {
        for (int child : tree[node]) {
            if (child == parent) continue;

            // Re-root：從 node 根轉移到 child 根
            res[child] = res[node] - count[child] + (n - count[child]);
            dfs2(child, node, n);
        }
    }
};